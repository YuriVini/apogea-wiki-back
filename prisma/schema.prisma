// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleType {
  ADMIN
  USER
}

model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  passwordHash String   @map("password_hash")
  avatarUrl    String?  @map("avatar_url")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  role    RoleType @default(USER)
  tokens  Token[]
  guides  Guide[]
  builds  Build[]
  ratings Rating[]

  @@map("users")
}

enum TokenType {
  PASSWORD_RECOVER
  EXPIRED
}

model Token {
  id        String    @id @default(uuid())
  type      TokenType
  createdAt DateTime  @default(now()) @map("created_at")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@map("tokens")
}

model Guide {
  id          String   @id @default(uuid())
  title       String
  steps       String
  footerText  String   @map("footer_text")
  description String
  createdAt   DateTime @default(now()) @map("created_at")

  user    User     @relation(fields: [userId], references: [id])
  userId  String   @default("") @map("user_id")
  ratings Rating[]

  @@map("guides")
}

enum CharacterClass {
  Knight
  Mage
  Squire
  Rogue
}

model Build {
  id             String         @id @default(uuid())
  title          String
  overview       String
  strategy       String
  characterStats String         @map("character_stats")
  characterClass CharacterClass @map("character_class")
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @updatedAt @map("updated_at")

  // Relations
  user    User     @relation(fields: [userId], references: [id])
  userId  String   @map("user_id")
  ratings Rating[]

  // Equipment relations
  ring        Equipment? @relation("ring", fields: [ringId], references: [id], onDelete: NoAction)
  ringId      String     @map("ring_id")
  necklace    Equipment? @relation("necklace", fields: [necklaceId], references: [id], onDelete: NoAction)
  necklaceId  String     @map("necklace_id")
  legs        Equipment? @relation("legs", fields: [legsId], references: [id], onDelete: NoAction)
  legsId      String     @map("legs_id")
  boots       Equipment? @relation("boots", fields: [bootsId], references: [id], onDelete: NoAction)
  bootsId     String     @map("boots_id")
  chest       Equipment? @relation("chest", fields: [chestId], references: [id], onDelete: NoAction)
  chestId     String     @map("chest_id")
  helmet      Equipment? @relation("helmet", fields: [helmetId], references: [id], onDelete: NoAction)
  helmetId    String     @map("helmet_id")
  leftHand    Equipment? @relation("leftHand", fields: [leftHandId], references: [id], onDelete: NoAction)
  leftHandId  String     @map("left_hand_id")
  backpack    Equipment? @relation("backpack", fields: [backpackId], references: [id], onDelete: NoAction)
  backpackId  String     @map("backpack_id")
  rightHand   Equipment? @relation("rightHand", fields: [rightHandId], references: [id], onDelete: NoAction)
  rightHandId String     @map("right_hand_id")
  accessory   Equipment? @relation("accessory", fields: [accessoryId], references: [id], onDelete: NoAction)
  accessoryId String     @map("accessory_id")

  @@map("builds")
}

model Equipment {
  id          String  @id @default(uuid())
  name        String
  type        String
  category    String
  imageUrl    String  @map("image_url")
  range       String? @map("range")
  size        String? @map("size")
  damage      String? @map("damage")
  defense     String? @map("defense")
  attributes  String? @map("attributes")
  weight      String? @map("weight")
  dropBy      String? @map("drop_by")
  rarity      String? @map("rarity")
  sellTo      String? @map("sell_to")
  buyFrom     String? @map("buy_from")
  attackSpeed String? @map("attack_speed")

  // Relations
  ringBuilds      Build[] @relation("ring")
  bootsBuilds     Build[] @relation("boots")
  chestBuilds     Build[] @relation("chest")
  helmetBuilds    Build[] @relation("helmet")
  leftHandBuilds  Build[] @relation("leftHand")
  backpackBuilds  Build[] @relation("backpack")
  rightHandBuilds Build[] @relation("rightHand")
  accessoryBuilds Build[] @relation("accessory")
  legsBuilds      Build[] @relation("legs")
  necklaceBuilds  Build[] @relation("necklace")

  @@map("equipments")
}

model Rating {
  id        String   @id @default(uuid())
  value     Int
  comment   String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user    User    @relation(fields: [userId], references: [id])
  userId  String  @map("user_id")
  build   Build?  @relation(fields: [buildId], references: [id])
  buildId String? @map("build_id")
  guide   Guide?  @relation(fields: [guideId], references: [id])
  guideId String? @map("guide_id")

  @@index([userId])
  @@index([buildId])
  @@index([guideId])
  @@map("ratings")
}
